---

- name: Ensure mandatory directories
  file:
    path: "{{item}}"
    state: directory
    recurse: yes
  with_items :
   - "{{docker_conf_path}}/Registry"
   - "{{registry_auth_path}}"
   - "{{registry_cert_path}}"
  tags:
  - docker_registry_dir

- name: Touch dir
  file:
    path: "/etc/docker/certs.d/{{ registry_name }}.{{domain}}"
    state: directory
    recurse: yes

- name: Trust CA
  copy:
    src: "{{docker_conf_path}}/SSL/cert.crt"
    dest: "/etc/docker/certs.d/{{ registry_name }}.{{domain}}/ca.crt"
    remote_src: yes

- name: Encrypt username/password
  docker_container:
    name: htpasswd
    image: registry:2.6
    entrypoint: htpasswd -Bbn {{ item.username }} {{ item.password }}
    detach: false
  with_items:  "{{ registry_users }}" 
  register: encrypt_htpasswd
  tags : output

- name: Create file, if it does not exist
  file:
    name: "{{ registry_auth_path }}/{{ registry_auth_file }}"
    state: touch

- name: Remove user from password file, if exists
  lineinfile:
    dest: "{{ registry_auth_path }}/{{ registry_auth_file }}"
    regexp: '^{{ item.username }}'
    state: absent 
  with_items: "{{ registry_users }}" 

- name: Add user to password file
  lineinfile:
    dest: "{{ registry_auth_path }}/{{ registry_auth_file }}"
    line: "{{ docker_container.Output | replace('\n', '') }}"

- name: Stopping container
  docker_container:
    name: htpasswd
    state: absent
    cleanup: yes
  tags:
  - docker_registry_secret_clean

- name: Template 'Registry' compose file
  template:
    src: registry.yml.j2
    dest: "{{docker_conf_path}}/Docker-registry/registry.yml"

- name: Deploy 'Docker-Registry' stack from file
  docker_stack:
    state: present
    name: "{{ registry_name }}"
    compose:
     - "{{docker_conf_path}}/Docker-registry/registry.yml"