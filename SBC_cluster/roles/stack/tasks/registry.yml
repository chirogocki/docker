---

- name: Ensure mandatory directories
  file:
    path: "{{item}}"
    state: directory
    recurse: yes
  with_items :
   - "{{docker_conf_path}}/Registry"
   - "{{registry_auth_path}}"
   - "{{registry_cert_path}}"
  tags:
  - docker_registry_dir

#- name: Creating Secret
#  command: docker run --entrypoint htpasswd registry:2.6 -Bbn {{registry_user}} {{registry_password}} | docker secret create registry_htpasswd -
#  tags:
#  - docker_registry_secret

- block:
  - name: Remove registry, if it exists
    docker_stack:
      name: "{{ registry_name }}"
      state: absent
  - name: Copy template
    template:
      src: registry/request.conf.j2
      dest: "{{ registry_cert_path }}/request.conf"
    when: registry_create_certs
  - name: Create key
    command: openssl genrsa -out "{{ registry_cert_path }}/{{ registry_key_file }}" 4096 
    when: registry_create_certs
  - name: Create certificate signing request
    command: >
       openssl req 
       -new 
       -out "{{ registry_cert_path }}/request.csr"
       -key "{{ registry_cert_path }}/{{ registry_key_file }}"
       -config request.conf
    args:
      chdir: "{{ registry_cert_path }}" 
    when: registry_create_certs
  - name: Sign the request
    command: >
       openssl x509
       -req
       -days 3650
       -in "{{ registry_cert_path }}/request.csr"
       -signkey "{{ registry_cert_path }}/{{ registry_key_file }}" 
       -out "{{ registry_cert_path }}/{{ registry_cert_file }}"
       -extensions v3_req 
       -extfile request.conf    
    args:
      chdir: "{{ registry_cert_path }}" 
    when: registry_create_certs

- name: Touch dir
  file:
    path: "/etc/docker/certs.d/{{ registry_name }}.{{domain}}:{{registry_container_port}}"
    state: directory
    recurse: yes

- name: Trust CA
  copy:
    src: "{{ registry_cert_path }}/{{ registry_cert_file }}"
    dest: "/etc/docker/certs.d/{{ registry_name }}.{{domain}}:{{registry_container_port}}/ca.crt"

- name: Encrypt username/password
  docker_container:
    name: htpasswd
    image: registry:2.6
    entrypoint: htpasswd -Bbn {{ item.username }} {{ item.password }}
    detach: false
  with_items:  "{{ registry_users }}" 
  register: encrypt_htpasswd
  tags : output

# - debug: 
#     var: docker_container.Output
#   tags : toto

- name: Create file, if it does not exist
  file:
    name: "{{ registry_auth_path }}/{{ registry_auth_file }}"
    state: touch

- name: Remove user from password file, if exists
  lineinfile:
    dest: "{{ registry_auth_path }}/{{ registry_auth_file }}"
    regexp: '^{{ item.username }}'
    state: absent 
  with_items: "{{ registry_users }}" 

- name: Add user to password file
  lineinfile:
    dest: "{{ registry_auth_path }}/{{ registry_auth_file }}"
    line: "{{ docker_container.Output | replace('\n', '') }}"
  # copy:
  #   content: "{{item}}"
  #   dest: "{{ registry_auth_path }}/{{ registry_auth_file }}"
  # with_items: encrypt_htpasswd.stdout

- name: Stopping container
  docker_container:
    name: htpasswd
    state: absent
    cleanup: yes
  tags:
  - docker_registry_secret_clean

# - include: encrypt.yml
#   with_items: "{{ registry_users }}" 
  
# - name: Recreate secure docker registry
#   docker_container:
#     name: "{{ registry_name }}" 
#     image: registry:2
#     volumes:
#       - "{{ registry_host_cert_path }}:/certs"
#       - "{{ registry_host_auth_path }}:/auth"
#     env:
#       REGISTRY_HTTP_TLS_CERTIFICATE: "/certs/{{ registry_cert_file }}"
#       REGISTRY_HTTP_TLS_KEY: "/certs/{{ registry_key_file }}"
#       REGISTRY_AUTH: htpasswd
#       REGISTRY_AUTH_HTPASSWD_REALM: "Registry Realm"
#       REGISTRY_AUTH_HTPASSWD_PATH: "/auth/{{ registry_auth_file }}"
#     ports:
#       - "{{ registry_host_port }}:{{ registry_container_port }}"
#   register: output

# - block:
#   - name: Genreating Secret
#     docker_container:
#       name: secretbuilderregistry
#       state: present
#       image: registry:2.6
#       entrypoint: htpasswd
#       command: -Bbn {{registry_user}} {{registry_password}} | docker secret create registry_htpasswd -
#     register: generated_secret
#     tags:
#     - docker_registry_secret_generate
#   - name: Create secret registry_htpasswd
#     docker_secret:
#       name: registry_htpasswd
#       data: "generated_secret.stdout"
#       state: present
#     tags:
#     - docker_registry_secret_create
#   - name: Stopping container
#     docker_container:
#       name: secretbuilderregistry
#       state: absent
#       cleanup: yes
#     tags:
#     - docker_registry_secret_clean

- name: Template 'Registry' compose file
  template:
    src: registry.yml.j2
    dest: "{{docker_conf_path}}/Docker-registry/registry.yml"

- name: Deploy 'Docker-Registry' stack from file
  docker_stack:
    state: present
    name: "{{ registry_name }}"
    compose:
     - "{{docker_conf_path}}/Docker-registry/registry.yml"